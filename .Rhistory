save(cmip6_1950_2014_voccAng, file="data/cmip6_1950_2014_voccAng.rda")
cmip6_2041_2060_voccAng <- brick(subset(epc, 22), subset(o2, 22), subset(ph, 22), subset(thetao, 22),
subset(arag, 22), subset(calc, 22), subset(co3, 22), subset(co3satarag, 22), subset(co3satcalc, 22),
subset(aragsat, 22), subset(calcsat, 22))
save(cmip6_2041_2060_voccAng, file="data/cmip6_2041_2060_voccAng.rda")
cmip6_2081_2100_voccAng <- brick(subset(epc, 23), subset(o2, 23), subset(ph, 23), subset(thetao, 23),
subset(arag, 23), subset(calc, 23), subset(co3, 23), subset(co3satarag, 23), subset(co3satcalc, 23),
subset(aragsat, 23), subset(calcsat, 23))
save(cmip6_2081_2100_voccAng, file="data/cmip6_2081_2100_voccAng.rda")
?cmip6_1950_2014_av
epc <- brick("G:/CMIP6_Taiwan/Raster/epcBottom/epcBottom_avg_ssp126.grd")
epc
names(epc)
source("~/GitHub/TaiwanSSP585/convert.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
var <- c("thetao", "epc100", "o2", "ph", "co3satcalc", "co3satarag", "co3", "calc", "arag")
bas1 <- c(rep("http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Omon/", 2),
rep("http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Oyr/", 7))
bas2 <- paste(var, "gr", c(rep("v20180701/", 2), rep("v20180701/", 7)), sep="/")
fre <- c(rep("_Omon_GFDL-ESM4_ssp585_r1i1p1f1_gr_", 2),
rep("_Oyr_GFDL-ESM4_ssp585_r1i1p1f1_gr_", 7))
mod <- paste(bas1, bas2, var, fre, sep="")
sta <- paste(seq(2015, 2095, by=20), "01", sep="")
end <- paste(c(seq(2034, 2094, by=20), 2100), "12", sep="")
t1 <- paste(sta, end, sep="-")
t2 <- "2015-2100"
urls <- NULL
destfiles <- NULL
for(i in 1:9){
if(i<=2) url <- paste(mod[i], t1, ".nc", sep="") else url <- paste(mod[i], t2, ".nc", sep="")
des <- paste("../ssp585/", var[i], "/GFDL-ESM4/", sep="")
urls <- c(urls, url)
destfiles <- c(destfiles, paste(des, basename(url), sep=""))
}
urls
knitr::opts_chunk$set(
collapse = TRUE,
message=FALSE,
warning=FALSE,
comment = "#>"
)
sta <- paste(seq(2015, 2095, by=20), "01", sep="")
end <- paste(c(seq(2034, 2094, by=20), 2100), "12", sep="")
t1 <- paste(sta, end, sep="-")
t1
sta <- paste(seq(2015, 2095, by=20), "01", sep="")
end <- paste(c(seq(2034, 2094, by=20), 2100), "12", sep="")
time <- paste(sta, end, sep="-")
paste(var, time, ".nc", sep="")
var <- "http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Omon/thetao/gr/v20180701/thetao_Omon_GFDL-ESM4_ssp585_r1i1p1f1_gr_"
sta <- paste(seq(2015, 2095, by=20), "01", sep="")
end <- paste(c(seq(2034, 2094, by=20), 2100), "12", sep="")
time <- paste(sta, end, sep="-")
paste(var, time, ".nc", sep="")
basenames(urls)
basename(urls)
des <- "C:/Users/user/Downloads"
paste(des, basename(urls), sep="")
des <- "C:/Users/user/Downloads/"
paste(des, basename(urls), sep="")
var <- "http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Omon/thetao/gr/v20180701/thetao_Omon_GFDL-ESM4_ssp585_r1i1p1f1_gr_"
sta <- paste(seq(2015, 2095, by=20), "01", sep="")
end <- paste(c(seq(2034, 2094, by=20), 2100), "12", sep="")
time <- paste(sta, end, sep="-")
urls <- paste(var, time, ".nc", sep="")
urls
des <- "C:/Users/user/Downloads/"
paste(des, basename(urls), sep="")
sta
# Source file urls
sta <- paste(seq(2015, 2095, by=20), "01", sep="")
end <- paste(c(seq(2034, 2094, by=20), 2100), "12", sep="")
time <- paste(sta, end, sep="-")
urls <- paste(var, time, ".nc", sep="")
# Path to save the files
destfiles <- paste("C:/Users/user/Downloads/", basename(urls), sep="")
# Download CMIP6 data
download.file(url = urls, destfile = destfiles, mode = "wb")
?download.file
# Download CMIP6 data
for(i in 1:5) download.file(url = urls[1], destfile = destfiles[1], mode = "wb")
options(timeout=3000)
download_until_success <- function(url, destfile, ..., maxcount = 5) {
if (file.exists(destfile)) {
message(paste0(destfile, '\tFile already exists'),
appendLF = TRUE)
} else {
ntry <- 0L
repeat{
Sys.sleep(0.5)
fl <- tryCatch(download.file(url, destfile, mode = "wb", ...), error = function(e)e)
not.yet <- inherits(fl, "error")
if(not.yet) Sys.sleep(3) else break
ntry <- ntry + 1L
if(ntry>=maxcount){
msg <- paste0(url, "\tReached max tries ", ntry)
message(msg, appendLF = TRUE)}
break
}
}
}
# Download CMIP6 data
for(i in 1:5) download_until_success(url = urls[1], destfile = destfiles[1], mode = "wb")
# Download CMIP6 data
for(i in 1:5) download_until_success(url = urls[1], destfile = destfiles[1], mode = "wb")
?download.file
# Download CMIP6 data
for(i in 1:5) download.file(url = urls[1], destfile = destfiles[1], mode = "wb")
urls
fil <- dir("C:/Users/user/Downloads/", full.names = TRUE, pattern = ".nc")
fil
destfile
# Source file urls
url <- "http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Omon/thetao/gr/v20180701/thetao_Omon_GFDL-ESM4_ssp585_r1i1p1f1_gr_201501-203412.nc"
# Path to save the files
destfile <- paste("C:/Users/user/Downloads/", basename(url), sep="")
destfile
ncvar_get(destfile, "thetao")
library(ncdf4)
library(scmisc)
keep_b
ncvar_get(destfile, "thetao")
destfile
fil
ncvar_get(destfile, "thetao")
dim(ncvar_get(destfile, "thetao"))
ncvar_get(destfile, "thetao")
# Source file urls
url <- "http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Omon/thetao/gr/v20180701/thetao_Omon_GFDL-ESM4_ssp585_r1i1p1f1_gr_201501-203412.nc"
# Path to save the files
destfile <- paste("C:/Users/user/Downloads/", basename(url), sep="")
ncvar_get(destfile, "thetao")
library(ncdf4)
library(scmisc)
m <- nc_open(destfile)
dim(ncvar_get(m, "thetao"))
# Seasurface temperature
thetao203412 <- nc_open(destfile) %>% ncvar_get("thetao")[,,1,240]
# Seasurface temperature
m <- nc_open(destfile) %>% ncvar_get("thetao")
# Seasurface temperature
m <- nc_open(destfile) %>% ncvar_get("thetao")
# Keep bottom most layer
sst <- ncvar_get(m, "thetao")[,,1,240]
# Keep bottom most layer
thetao <- ncvar_get(m, "thetao")
# Seasurface temperature
m <- nc_open(destfile)
# Keep bottom most layer
thetao <- ncvar_get(m, "thetao")
dim(thetao)
# Convert to latlon projection
y <- as.vector(ncvar_get(m1, "lat"))
# Convert to latlon projection
y <- as.vector(ncvar_get(m, "lat"))
x <- as.vector(ncvar_get(m, "lon"))
x[x>180] <- x[x>180]-360
x <- rep(x, 180)
y <- rep(y, each=360)
dat <- na.omit(data.frame(cbind(x, y, sst=thetao[,,1,240])))
head(dat)
x
y
thetao[,,1,240]
dim(thetao)
thetao[, , 1, 240]
dim(thetao[, , 1, 240])
dat <- na.omit(data.frame(cbind(x, y, sst=as.vector(thetao[,,1,240]))))
head(dat)
dat <- na.omit(data.frame(cbind(x, y, value=as.vector(thetao[,,1,240]))))
basemap(dat)
basemap(dat, title="Sea~Surface~Temperature")
basemap(dat, title="Sea~Surface~Temperature")
basemap(dat, title="Sea~Surface~Temperature~(degree~C)")
basemap(dat, title="203412~Sea~Surface~Temperature~(degree~C)")
basemap(dat, title="2034~Dec~Sea~Surface~Temperature~(degree~C)")
basemap(dat, title="Dec~2034~Sea~Surface~Temperature~(degree~C)")
# Keep bottom most layer
thetao <- ncvar_get(m, "thetao") %>% keep_b
keep_b
library(abind)
# Keep bottom most layer
thetao <- ncvar_get(m, "thetao") %>% keep_b
dim(thetao)
dat <- na.omit(data.frame(cbind(x, y, value=thetao[,,240] )))
basemap(dat, title="Dec~2034~Sea~Surface~Temperature~(degree~C)")
dat <- na.omit(data.frame(cbind(x, y, value=thetao[,,240] %>% as.vector )))
basemap(dat, title="Dec~2034~Sea~Surface~Temperature~(degree~C)")
basemap(dat, title="Dec~2034~Seafloor~Temperature~(degree~C)")
knitr::opts_chunk$set(
collapse = TRUE,
message=FALSE,
warning=FALSE,
comment = "#>"
)
library(ncdf4)
library(scmisc)
library(abind)
library(dplyr)
# Source file urls
url <- "http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Oyr/ph/gr/v20230616/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2091-2100.nc"
# Path to save the files
destfile <- paste("C:/Users/user/Downloads/", basename(url), sep="")
url
# Path to save the files
destfile <- paste("C:/Users/user/Downloads/", basename(url), sep="")
url
basename(url)
# Source file urls
url <- "http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Oyr/ph/gr/v20230616/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2091-2100.nc"
# Path to save the files
destfile <- paste("C:/Users/user/Downloads/", basename(url), sep="")
# Download CMIP6 data
download.file(url = url, destfile = destfile, mode = "wb")
# Download CMIP6 data
download.file(url = url, destfile = destfile, mode = "wb")
# Source file urls
url <- "http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Oyr/ph/gr/v20230616/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2015-2020.nc"
# Path to save the files
destfile <- paste("C:/Users/user/Downloads/", basename(url), sep="")
# Download CMIP6 data
download.file(url = url, destfile = destfile, mode = "wb")
?download.file
# Seasurface temperature
m <- nc_open(destfile)
# Source file urls
url <- "http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Oyr/ph/gr/v20230616/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2015-2020.nc"
# Path to save the files
destfile <- paste("C:/Users/user/Downloads/", basename(url), sep="")
# Download CMIP6 data
download.file(url = url, destfile = destfile, mode = "wb")
# Seasurface temperature
m <- nc_open(url)
# Download CMIP6 data
download.file(url = url, destfile = destfile)
# Seasurface temperature
m <- nc_open(destfile)
# Seasurface temperature
m <- nc_open(destfile)
# Seasurface temperature
m <- nc_open(destfile)
?keep_b
# Seasurface temperature
m <- nc_open("C:/Users/user/Downloads/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2091-2100.nc")
# Seasurface temperature
m <- nc_open("C:/Users/user/Downloads/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2091-2100.nc")
# Keep bottom most layer
ph <- ncvar_get(m, "ph") %>% keep_b
dim(ph)
keep_b
# Seawater pH
m <- nc_open("C:/Users/user/Downloads/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2091-2100.nc")
# Keep bottom most layer
ph <- ncvar_get(m, "ph")
dim(ph)
# Seawater pH from 2019 to 2100
m <- nc_open("C:/Users/user/Downloads/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2091-2100.nc")
a <- ncvar_get(m, "ph")
dim(a)
o <- NULL
for(j in 1:dim(a)[4]){
b <- a[,,1,j]
for(i in 2:dim(x)[3]){
# Next layer
n <- x[,,i,j]
# Replace surface with next layer
b[!is.na(n)] <- n[!is.na(n)]
}
# Combine data
o <- abind(o, b, along=3)
}
o <- NULL
for(j in 1:dim(a)[4]){
b <- a[,,1,j]
for(i in 2:dim(a)[3]){
# Next layer
n <- x[,,i,j]
# Replace surface with next layer
b[!is.na(n)] <- n[!is.na(n)]
}
# Combine data
o <- abind(o, b, along=3)
}
o <- NULL
for(j in 1:dim(a)[4]){
b <- a[,,1,j]
for(i in 2:dim(a)[3]){
# Next layer
n <- a[,,i,j]
# Replace surface with next layer
b[!is.na(n)] <- n[!is.na(n)]
}
# Combine data
o <- abind(o, b, along=3)
}
dim(o)
?dim
# Seawater pH from 2021 to 2030
m1 <- nc_open("C:/Users/user/Downloads/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2021-2030.nc")
a1 <- ncvar_get(m1, "ph")
# Seawater pH from 2019 to 2100
m2 <- nc_open("C:/Users/user/Downloads/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2091-2100.nc")
a2 <- ncvar_get(m2, "ph")
# Dimensions of model projections
dim(a1)
keep_b(a1) %>% dim
b1 <- keep_b(a1)
b2 <- keep_b(a2)
dim(a1)
b1 <- keep_b(a1)
b2 <- keep_b(a2)
# Dimensions of the bottom most projections
dim(b1)
cbind(x, y, value=b1[,,1] %>% as.vector )
# Coordinates of each grid
y <- as.vector(ncvar_get(m, "lat"))
# Coordinates of each grid
y <- as.vector(ncvar_get(m1, "lat"))
# Coordinates of each grid
y <- as.vector(ncvar_get(m1, "latitude"))
x <- as.vector(ncvar_get(m1, "longitude"))
x[x>180] <- x[x>180]-360
cbind(x, y, value=b1[,,1] %>% as.vector )
b2021 <- cbind(x, y, value=b1[,,1] %>% as.vector) %>% data.frame %>% na.omit
b2021
# First layer of b1
b2021 <- cbind(x, y, value=b1[,,1] %>% as.vector) %>% data.frame %>% na.omit
# 10th layer of b2
b2100 <- cbind(x, y, value=b2[,,10] %>% as.vector) %>% data.frame %>% na.omit
b2021
b2100
library(ggplot2)
out <- rbind(cbind(b2021, Year=2021), cbind(b2100, Year=2100))
head(out)
out <- rbind(cbind(b2021, year=2021), cbind(b2100, year=2100))
ggplot(data = out)+
geom_raster(aes(x=x, y=y, fill=value))+
facet_wrap(~year)
ggplot(data = out)+
geom_raster(aes(x=x, y=y, fill=value))
head(out)
str(out)
head(out)
ggplot(b2100)+
geom_raster(aes(x=x, y=y, fill=value))
ggplot(b2100)+
geom_tile(aes(x=x, y=y, fill=value))
head(b2100)
ggplot(b2020)+
geom_tile(aes(x=x, y=y, fill=value))
ggplot(b2021)+
geom_tile(aes(x=x, y=y, fill=value))
image(b1[,,1])
?geom_raster
ggplot(b2021)+
geom_raster(aes(x=x, y=y, fill=value))
ggplot(b2021)+
geom_tile(aes(x=x, y=y, fill=value))
# First layer of b1
b2021 <- cbind(x, y, value=b1[,,1] %>% as.vector) %>% data.frame
# 10th layer of b2
b2100 <- cbind(x, y, value=b2[,,10] %>% as.vector) %>% data.frame
out <- rbind(cbind(b2021, year=2021), cbind(b2100, year=2100))
ggplot(b2021)+
+     geom_tile(aes(x=x, y=y, fill=value))
ggplot(b2021)+geom_tile(aes(x=x, y=y, fill=value))
ggplot(b2021)+geom_raster(aes(x=x, y=y, fill=value))
plot(b2100)
b2100
ggplot(b2100)+
geom_tile(aes(x=x, y=y, fill=value))+
facet_wrap(~year)
# First layer of b1
b2021 <- cbind(x, y, value=b1[,,1] %>% as.vector) %>% data.frame
# 10th layer of b2
b2100 <- cbind(x, y, value=b2[,,10] %>% as.vector) %>% data.frame
out <- rbind(cbind(b2021, year=2021), cbind(b2100, year=2100))
ggplot(b2100)+
geom_tile(aes(x=x, y=y, fill=value))+
facet_wrap(~year)
ggplot(out)+
geom_tile(aes(x=x, y=y, fill=value))+
facet_wrap(~year)
plot(y~x, b2021, pch=".")
# Coordinates of each grid
y <- as.vector(ncvar_get(m1, "latitude"))
x <- as.vector(ncvar_get(m1, "longitude"))
y
x
# Coordinates of each grid
y <- as.vector(ncvar_get(m1, "latitude"))
x <- as.vector(ncvar_get(m1, "longitude"))
#x[x>180] <- x[x>180]-360
image(b1)
image(b1[,,1])
# Seawater pH from 2021 to 2030
m1 <- nc_open("C:/Users/user/Downloads/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2021-2030.nc")
a1 <- ncvar_get(m1, "ph")
# Seawater pH from 2019 to 2100
m2 <- nc_open("C:/Users/user/Downloads/ph_Oyr_NorESM2-MM_ssp585_r1i1p1f1_gr_2091-2100.nc")
a2 <- ncvar_get(m2, "ph")
# Dimensions of model projections
dim(a1)
keep_b <-
function(x){
y <- NULL
for(j in 1:dim(x)[4]){
b <- x[,,1,j]
for(i in 2:dim(x)[3]){
# Next layer
n <- x[,,i,j]
# Replace surface with next layer
b[!is.na(n)] <- n[!is.na(n)]
}
# Combine data
y <- abind(y, b, along=3)
}
return(y)
}
b1 <- keep_b(a1)
b2 <- keep_b(a2)
# Dimensions of the bottom most projections
dim(b1)
# Coordinates of each grid
y <- as.vector(ncvar_get(m1, "latitude"))
x <- as.vector(ncvar_get(m1, "longitude"))
x[x>180] <- x[x>180]-360
# First layer of b1
b2021 <- cbind(x, y, value=b1[,,1] %>% as.vector) %>% data.frame
# 10th layer of b2
b2100 <- cbind(x, y, value=b2[,,10] %>% as.vector) %>% data.frame
out <- rbind(cbind(b2021, year=2021), cbind(b2100, year=2100))
plot(y~x, b2021, pch=".")
plot(y~x, b2100, pch=".")
# First layer of b1
b2021 <- cbind(x, y, value=b1[,,1] %>% as.vector) %>% data.frame %>%　na.omit
# 10th layer of b2
b2100 <- cbind(x, y, value=b2[,,10] %>% as.vector) %>% data.frame %>%　na.omit
out <- rbind(cbind(b2021, year=2021), cbind(b2100, year=2100))
plot(y~x, b2100, pch=".")
ggplot(b2021)+
geom_tile(aes(x=x, y=y, fill=value))
ggplot(b2021)+
geom_tile(aes(x=x, y=y, fill=value))
ggplot(b2021)+
geom_tile(aes(x=x, y=y, fill=value))+
geom_sf()
?geom_sf
?image
ggplot(data=b2021, aes(x=x, y=y))+
geom_tile(value)
head(b2021)
ggplot(data=b2021, aes(x=x, y=y))+
geom_tile(aes(fill=value))
ggplot(data=b2021, aes(x=x, y=y, fill=value))+
geom_tile()
ggplot(data=b2021, aes(x=x, y=y))+
geom_point()
ggplot(data=b2021, aes(x=x, y=y, colour=value))+
geom_point()
ggplot(data=out, aes(x=x, y=y, colour=value))+
geom_point()+
facet_wrap(~year)
?geom_raster
ggplot(data=out, aes(x=x, y=y, fill=value))+
geom_raster()+
facet_wrap(~year)
ggplot(data=out, aes(x=x, y=y, colour=value))+
geom_point()+
coord_map()+
facet_wrap(~year)
?coord_map
?scale_colour_brewer
ggplot(data=out, aes(x=x, y=y, colour=value))+
geom_point()+
coord_map()+
scale_colour_brewer(palette = "Spectral")+
facet_wrap(~year)
ggplot(data=out, aes(x=x, y=y, colour=value))+
geom_point()+
coord_map()+
scale_colour_brewer(palette = "YlOrRd")+
facet_wrap(~year)
ggplot(data=out, aes(x=x, y=y, colour=value))+
geom_point()+
coord_map()+
scale_colour_viridis_c()+
facet_wrap(~year)
?scale_colour_viridis_c
ggplot(data=out, aes(x=x, y=y, colour=value))+
geom_point()+
coord_map()+
scale_colour_viridis_c(option = "turbo")+
facet_wrap(~year)
ggplot(data=out, aes(x=x, y=y, colour=value))+
geom_point()+
coord_map()+
labs(x="", y="", colour="pH")+
scale_colour_viridis_c(option = "turbo")+
facet_wrap(~year)
ggplot(data=out, aes(x=x, y=y, colour=value))+
geom_point()+
coord_map()+
labs(x="", y="", colour="pH")+
scale_colour_viridis_c(option = "turbo")+
facet_wrap(~year)
ggplot(data=out, aes(x=x, y=y, colour=value))+
geom_point()+
coord_map()+
labs(x="", y="", colour="pH")+
scale_colour_viridis_c(option = "turbo")+
facet_wrap(~year)
